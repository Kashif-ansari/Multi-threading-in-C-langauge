#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>
void *print_message_function(void *ptr);
int main(){
pthread_t thread1, thread2;
char *message1 = "Thread 1";
char *message2 = "Thread 2";
int iret1, iret2;
iret1 = pthread_create(&thread1,NULL, print_message_function, (void*) message1);
iret2 = pthread_create(&thread2,NULL, print_message_function, (void*) message2);
sleep(3);
printf("Thread 1 returns %d\n", iret1);
printf("Thread 2 returns %d\n", iret2);}
void *print_message_function(void *ptr){
char *message;
message=(char*)ptr;
printf("%d\n",message);}


#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>
void *functionC();
pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;
int counter =0;
int main(){
int rc1, rc2;
pthread_t thread1, thread2;
rc1 = pthread_create(&thread1,NULL,&functionC,NULL);
if(rc1!=0){
printf("Thread creation failed: %d\n",rc1);
}
rc2 = pthread_create(&thread2,NULL,&functionC,NULL);
if(rc2!=0){
printf("Thread creation failed: %d\n",rc2);
}
sleep(3);
return 0;
}
void *functionC(){
pthread_mutex_lock(&mutex1);
counter++;
printf("Counter value : %d thread ID: %d\n",counter,pthread_self());
pthread_mutex_unlock(&mutex1);}
for(i=0;i<10;i++){
pthread_create(&thread_id[i],NULL,thread_function,NULL);
}

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>
void *thread_function(void*);
pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;
int counter =0;
int main(){
pthread_t thread_id[10];
for(int i=0;i<10;i++){
pthread_create(&thread_id[i],NULL,thread_function,NULL);
}
for(int j=0;j<10;j++){
pthread_join(thread_id[j],NULL);
}
printf("Final counter value: %d\n",counter);

return 0;
}
void *thread_function(void *dummyPtr){
printf("Thread number %d\n",pthread_self());
pthread_mutex_lock(&mutex1);
counter++;
pthread_mutex_unlock(&mutex1);}

